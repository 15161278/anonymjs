module.exports = function (grunt) {
    "use strict";
    var pkg = grunt.file.readJSON("package.json"),
        tasks = {},
        files = {
            core: ['compatible', 'core'],
            module: [
                'element',
                //'overlay',
                //'scroll-view',
                //'grid-view',
                'jquery-extend'
            ],
            'element': {
                closure: '',
                files: ['element-core', 'element-selector', 'element-manipulation', 'element-traversing', 'element-event']
            },
            'jquery-extend': {
                closure: 'jquery',
                files: ['jquery-event']
            },
            'scroll-view': {
                closure: 'widget',
                files: ['scroll-view', 'export']
            },
            'overlay': {
                closure: 'widget',
                files: ['overlay', 'export']
            },
            'grid-view': {
                closure: 'widget',
                files: ['grid', 'row', 'column', 'render', 'layout', 'factory', 'dynamic-columns', 'export']
            }
        },
        dirs = {
            lib: './lib/',
            css: './src/css/',
            script: './src/script/',
            images: './src/images/',
            docs: './docs/',
            dest: './dest/',
            test: './test/',
            showcase: './showcase/resources/'
        },
    //function
        banner = {
            single: function (file) {
                return [
                        '/*! <%= pkg.name %>.' + file + ' of <%= pkg.title %> v<%= pkg.version %>, <%= pkg.description %>\n',
                    '* Generated by grunt, <%= grunt.template.today("yyyy/mm/dd HH:mm:ss") %>\n',
                    '* Copyright <%= grunt.template.today("yyyy") %> SYNNEX Corporation.\n*/\n\n'
                ].join('');
            },
            package: function () {
                return [
                    '/*! <%= pkg.title %> - v<%= pkg.version %>, <%= pkg.description %>\n',
                    '* Generated by grunt, <%= grunt.template.today("yyyy/mm/dd HH:mm:ss") %>\n',
                    '* Copyright <%= grunt.template.today("yyyy") %> SYNNEX Corporation.\n*/\n\n'
                ].join('');
            }
        },
        closure = function (files, type) {
            var wrap;
            if (type === 'jquery') {
                wrap = [dirs.script + 'closure/intro-jquery', dirs.script + 'closure/outro-jquery'];
            } else if (type === 'widget') {
                wrap = [dirs.script + 'closure/intro-widget', dirs.script + 'closure/outro-widget'];
            } else {
                wrap = [dirs.script + 'closure/intro', dirs.script + 'closure/outro'];
            }
            if (Array.isArray(files)) {
                files.unshift(wrap[0]);
                files.push(wrap[1]);
                return files;
            }
            return wrap;
        },
        fileMap = function (dest, src) {
            var o = {};
            o[dest] = src;
            return o;
        };
    tasks.clean = function () {
        return {
            options: {
                force: true
            },
            src: [dirs.docs + '/**/*.*', dirs.dest + '/css/**/*.*', dirs.dest + '/script/**/*.*', dirs.dest + '/images/**/*.*']
        };
    };
    tasks.imagemin = function () {
        var config = {};
        config['icons'] = {
            files: [
                {
                    expand: true,
                    cwd: dirs.images,
                    src: ['**/*.{png,jpg,gif}'],
                    dest: dirs.dest + '/images/'
                }
            ]
        };
        return config;
    };
    tasks.sprite = function () {
        return {
            src: dirs.dest + '/images/datatable-icon/*.png',
            destImg: dirs.dest + '/images/datatable-icon.png',
            destCSS: dirs.dest + '/css/datatable-icon.less',
            imgPath: '../images/datatable-icon.png',
            algorithm: 'binary-tree',
            cssFormat: 'less',
            cssVarMap: function (sprite) {
                sprite.name = 'ui-icon-' + sprite.name;
            }
        };
    };
    tasks.concat = function () {
        var config = {};
        //core script
        config.core = {
            options: {
                banner: banner.single('core'),
                process: function (src, filepath) {
                    return src.replace(/<%= pkg.version %>/g, pkg.version).replace(/<%= pkg.name %>/g, pkg.name);
                }
            },
            files: fileMap(dirs.dest + 'script/core.js', files.core.map(function (file) {
                return dirs.script + 'core/' + file + '.js';
            }))
        };
        //modules script
        files.module.forEach(function (name) {
            config[name.replace(/[-]/i, '')] = {
                options: {
                    banner: banner.single(name),
                    process: function (src, filepath) {
                        return src.replace(/<%= pkg.name %>/g, pkg.name);
                    }
                },
                files: fileMap(dirs.dest + 'script/' + name + '.js', closure(files[name].files.map(function (module) {
                    return [dirs.script + name + '/' + module + '.js'];
                }), files[name].closure))
            };
        });
        //concat all script and less
        config.all = {
            options: {
                banner: banner.package()
            },
            files: {}
        };
        config.all.files[dirs.dest + 'script/<%= pkg.name %>.js'] = [];
        config.all.files[dirs.dest + 'css/<%= pkg.name %>.css'] = [];
        ['core'].concat(files.module).forEach(function (module) {
            config.all.files[dirs.dest + 'script/<%= pkg.name %>.js'].push(dirs.dest + 'script/' + module + '.js');
            config.all.files[dirs.dest + 'css/<%= pkg.name %>.css'].push(dirs.dest + 'css/' + module + '.css');
        });
        return config;
    };
    tasks.less = function () {
        var config = {};
        ['core'].concat(files.module).forEach(function (file) {
            config[file] = {
                files: fileMap(dirs.dest + 'css/' + file + '.css', dirs.css + file + '.less')
            };
        });
        return config;
    };
    tasks.uglify = function () {
        var config = {
            options: {
                preserveComments: false
            },
            main: {
                options: {
                    banner: banner.package(),
                    report: "gzip"
                },
                files: [
                    {
                        expand: true,
                        cwd: dirs.dest + 'script/',
                        src: ['*.js', '!*.min.js'],
                        dest: dirs.dest + 'script/',
                        ext: '.min.js'
                    }
                ]
            }
        };
        return config;
    };
    tasks.cssmin = function () {
        var config = {
            css: {
                options: {
                    keepSpecialComments: "*",
                    banner: banner.package()
                },
                expand: true,
                cwd: dirs.dest + '/css/',
                src: ['*.css', '!*.min.css'],
                dest: dirs.dest + '/css/',
                ext: '.min.css'
            }
        };
        return config;
    };
    tasks.yuidoc = function () {
        var config = {
            compile: {
                name: '<%= pkg.name %>',
                description: '<%= pkg.description %>',
                version: '<%= pkg.version %>',
                url: '<%= pkg.homepage %>',
                options: {
                    paths: dirs.dest + '/script/',
                    exclude: '*.min.js,<%= pkg.name %>.js',
                    outdir: dirs.docs
                }
            }
        };
        return config;
    };
    tasks.watch = function () {
    };
    grunt.initConfig({
        pkg: pkg,
        clean: tasks.clean(),
        imagemin: tasks.imagemin(),
        sprite: tasks.sprite(),
        concat: tasks.concat(),
        less: tasks.less(),
        uglify: tasks.uglify(),
        cssmin: tasks.cssmin(),
        //watch: tasks.watch(),
        yuidoc: tasks.yuidoc()
    });
    // grunt plugins
    grunt.loadNpmTasks("grunt-contrib-watch");
    grunt.loadNpmTasks("grunt-contrib-copy");
    grunt.loadNpmTasks("grunt-contrib-concat");
    grunt.loadNpmTasks("grunt-contrib-clean");
    grunt.loadNpmTasks("grunt-contrib-less");
    grunt.loadNpmTasks("grunt-contrib-cssmin");
    grunt.loadNpmTasks("grunt-contrib-uglify");
    grunt.loadNpmTasks("grunt-contrib-jshint");
    grunt.loadNpmTasks("grunt-contrib-csslint");
    grunt.loadNpmTasks("grunt-contrib-yuidoc");
    grunt.loadNpmTasks("grunt-contrib-imagemin");
    grunt.loadNpmTasks('grunt-spritesmith');
    //grunt tasks
    //grunt.registerTask('icon', ['imagemin', 'sprite']);
    grunt.registerTask('dev', [
        'clean',
        //'icon',
        'concat:core'
    ].concat(files.module.map(function (file) {
            return 'concat:' + file.replace(/-/, '');
        })
    ).concat(
        [
            'less',
            'concat:all'
        ]));
    grunt.registerTask('build', ['dev', 'yuidoc', 'uglify', 'cssmin']);
    grunt.registerTask('doc', ['dev', 'yuidoc']);
    grunt.registerTask('compress', ['dev', 'uglify', 'cssmin']);
    grunt.registerTask('default', ['dev']);
};